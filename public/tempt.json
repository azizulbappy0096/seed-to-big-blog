{
    "key": "<h1>Some title</h1><h2 style='margin-left:0px;'>onChange</h2><p style='margin-left:0px;'>The <code>onChange</code> event behaves as you would expect it to: whenever a form field is changed, this event is fired. We intentionally do not use the existing browser behavior because <code>onChange</code> is a misnomer for its behavior and React relies on this event to handle user input in real time.</p><h3 style='margin-left:0px;'>selected</h3><p style='margin-left:0px;'>If you want to mark an <code>&lt;option&gt;</code> as selected, reference the value of that option in the <code>value</code> of its <code>&lt;select&gt;</code> instead. Check out <a href='https://reactjs.org/docs/forms.html#the-select-tag'>“The select Tag”</a> for detailed instructions.</p><h3 style='margin-left:0px;'>style</h3><blockquote><p style='margin-left:0px;'><strong>Note</strong></p><p style='margin-left:0px;'>Some examples in the documentation use <code>style</code> for convenience, but <strong>using the </strong><code><strong>style</strong></code><strong> attribute as the primary means of styling elements is generally not recommended.</strong> In most cases, <a href='https://reactjs.org/docs/dom-elements.html#classname'><code>className</code></a> should be used to reference classes defined in an external CSS stylesheet. <code>style</code> is most often used in React applications to add dynamically-computed styles at render time. See also <a href='https://reactjs.org/docs/faq-styling.html'>FAQ: Styling and CSS</a>.</p></blockquote><p style='margin-left:0px;'>The <code>style</code> attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM <code>style</code> JavaScript property, is more efficient, and prevents XSS security holes. For example:</p><figure class='image image-style-side'><img src='http://localhost:2000/images/upload-1632036893448.jpg'><figcaption>caption goes here</figcaption></figure><p><span style='color:rgb(0,0,0);'>The </span><code>style</code><span style='color:rgb(0,0,0);'> attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM </span><code>style</code><span style='color:rgb(0,0,0);'> JavaScript property, is more efficient, and prevents XSS security holes. For example:</span></p><pre><code class='language-javascript'>const divStyle = {color: 'blue',backgroundImage: 'url(' + imgUrl + ')',};function HelloWorldComponent() {return &lt;div style={divStyle}&gt;Hello World!&lt;/div&gt;;}</code></pre><p style='margin-left:0px;'>Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes from JS (e.g. <code>node.style.backgroundImage</code>). Vendor prefixes <a href='https://www.andismith.com/blogs/2012/02/modernizr-prefixed/'>other than <code>ms</code></a> should begin with a capital letter. This is why <code>WebkitTransition</code> has an uppercase “W”.</p><p style='margin-left:0px;'>React will automatically append a “px” suffix to certain numeric inline style properties. If you want to use units other than “px”, specify the value as a string with the desired unit. For example:</p>"
}